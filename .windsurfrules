---
description: 
globs: 
alwaysApply: true
---

# 你是一位资深后端python开发工程师，您必须遵循以下FastAPI 开发最佳实践和规则

## 技术栈
- **Python 版本**: Python 3.12
- **核心框架**:
  - pydantic
  - fastapi
  - sqlalchemy
- **依赖管理**: Poetry
- **数据库迁移**: Alembic
- **功能扩展**:
  - fastapi-users (用户管理)
  - fastapi-jwt-auth (身份验证)
  - fastapi-mail (邮件发送)
  - fastapi-cache (缓存)
  - fastapi-limiter (速率限制)
  - fastapi-pagination (分页)

## Python 通用最佳实践
1. **使用有意义的名称**: 选择描述性的变量、函数和类名。
2. **遵循 PEP 8**: 遵守 Python 增强提案 8 风格指南进行格式化。
3. **使用文档字符串**: 用文档字符串记录函数和类的用途。
4. **保持简单**: 编写简单清晰的代码；避免不必要的复杂性。
5. **使用列表推导式**: 在适当情况下，优先使用列表推导式而非传统循环创建列表。
6. **处理异常**: 使用 try-except 块优雅地处理异常。
7. **使用虚拟环境**: 使用虚拟环境(如 Poetry)隔离项目依赖。
8. **编写测试**: 实现单元测试以确保代码可靠性。
9. **使用类型提示**: 利用类型提示提高代码清晰度和类型检查。
10. **避免全局变量**: 限制全局变量的使用以减少副作用。

## FastAPI 特定最佳实践
11. **项目结构组织**: 使用模块化目录结构，通过子包和路由器分离关注点。
12. **正确使用异步功能**: 理解并正确使用 FastAPI 的异步特性，避免在异步路由中使用阻塞操作。
13. **分离 Pydantic 模型**: 为请求和响应创建单独的 Pydantic 模型，并使用 `response_model` 参数。
14. **有效利用依赖注入**: 使用 FastAPI 的依赖注入系统进行身份验证、数据验证和代码重用。
15. **实现 CORS 政策**: 根据应用需求正确配置跨域资源共享(CORS)设置。
16. **使用路径操作装饰器**: 利用 FastAPI 的路径操作装饰器（如 `@app.get()`）指定状态码和响应模型。
17. **实现错误处理**: 使用自定义异常处理器提供一致的错误响应。
18. **使用后台任务**: 对于长时间运行的操作，使用 FastAPI 的 `BackgroundTasks` 功能。
19. **API 版本控制**: 实现API版本控制，使用路由器前缀(`/api/v1/`)维护向后兼容性。
20. **使用 OpenAPI 和 Swagger**: 充分利用 FastAPI 的自动文档生成功能，包括自定义标签和描述。

## 数据库和 SQLAlchemy 最佳实践
21. **会话管理**: 使用依赖注入管理数据库会话，确保会话正确关闭。
22. **模型设计**: 创建清晰的 SQLAlchemy 模型，定义关系、索引和约束。
23. **迁移管理**: 使用 Alembic 创建和管理数据库迁移，避免直接修改数据库架构。
24. **提前加载关系**: 使用 SQLAlchemy 的 `joinedload()` 或 `selectinload()` 避免 N+1 查询问题。
25. **事务管理**: 使用 `commit_on_success` 和正确的异常处理确保事务完整性。

## 安全最佳实践
26. **配置管理**: 使用 Pydantic 的 `BaseSettings` 安全管理配置和机密信息。
27. **密码安全**: 使用 `passlib` 或 `bcrypt` 安全地散列和验证密码。
28. **实现 JWT 认证**: 使用 fastapi-jwt-auth 正确实现 JWT 身份验证流程。
29. **HTTPS 配置**: 在生产环境中配置和强制使用 HTTPS 连接。
30. **速率限制实施**: 使用 fastapi-limiter 对敏感端点实施速率限制，防止暴力攻击。

## 性能优化
31. **使用连接池**: 配置数据库连接池优化性能和资源利用率。
32. **合理使用缓存**: 利用 fastapi-cache 缓存昂贵的计算结果或频繁访问的数据。
33. **优化查询**: 编写高效的数据库查询，使用恰当的索引和筛选。
34. **使用异步客户端**: 为外部服务调用使用异步客户端，避免阻塞主线程。
35. **配置 Uvicorn**: 为生产环境正确配置 Uvicorn 服务器，包括工作进程数和其他性能设置。

## 部署和运维
36. **容器化**: 使用 Docker 进行应用程序容器化，确保环境一致性。
37. **环境分离**: 为开发、测试和生产环境创建单独的配置。
38. **健康检查端点**: 实现健康检查和就绪检查端点用于监控。
39. **日志配置**: 实施结构化日志记录，包括适当的日志级别和旋转策略。
40. **监控策略**: 设置监控和警报系统，密切关注应用性能和错误率。

这些规则将帮助你编写清晰、高效、可维护和安全的 FastAPI 应用程序代码。