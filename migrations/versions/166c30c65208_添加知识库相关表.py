"""添加知识库相关表

Revision ID: 166c30c65208
Revises: 060e20bf2310
Create Date: 2025-04-09 13:33:26.860723

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '166c30c65208'
down_revision = '060e20bf2310'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('knowledge_base_documents',
    sa.Column('knowledge_base_id', sa.String(length=36), nullable=False),
    sa.Column('document_id', sa.String(length=36), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['knowledge_base_id'], ['knowledge_bases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('knowledge_base_id', 'document_id')
    )
    op.create_table('knowledge_base_permissions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('knowledge_base_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['knowledge_base_id'], ['knowledge_bases.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('child_chunks',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('segment_id', sa.String(length=36), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('meta_data', sa.Text(), nullable=True),
    sa.Column('tokens', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('embedding_vector', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['segment_id'], ['segments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('ix_task_status_status_created_at', table_name='task_status')
    op.drop_index('ix_task_status_task_id', table_name='task_status')
    op.drop_index('ix_task_status_task_type_status', table_name='task_status')
    op.drop_index('ix_task_status_user_id', table_name='task_status')
    op.drop_table('task_status')
    op.add_column('documents', sa.Column('doc_form', sa.String(length=50), nullable=True))
    op.add_column('documents', sa.Column('doc_format', sa.Enum('TEXT', 'MARKDOWN', 'PDF', 'DOCX', 'HTML', 'CSV', 'JSON', 'CODE', 'OTHER', name='documentformat'), nullable=True))
    op.add_column('documents', sa.Column('enabled', sa.Boolean(), nullable=False))
    op.add_column('documents', sa.Column('archived', sa.Boolean(), nullable=False))
    op.add_column('documents', sa.Column('word_count', sa.Integer(), nullable=True))
    op.add_column('documents', sa.Column('token_count', sa.Integer(), nullable=True))
    op.add_column('documents', sa.Column('processing_started_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('parsing_started_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('parsing_completed_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('splitting_started_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('splitting_completed_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('indexing_started_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('indexing_completed_at', sa.DateTime(), nullable=True))
    op.add_column('documents', sa.Column('processing_completed_at', sa.DateTime(), nullable=True))
    op.alter_column('knowledge_base_document', 'knowledge_base_id',
               existing_type=mysql.VARCHAR(length=36),
               nullable=False)
    op.alter_column('knowledge_base_document', 'document_id',
               existing_type=mysql.VARCHAR(length=36),
               nullable=False)
    op.drop_constraint('knowledge_base_document_ibfk_1', 'knowledge_base_document', type_='foreignkey')
    op.drop_constraint('knowledge_base_document_ibfk_2', 'knowledge_base_document', type_='foreignkey')
    op.create_foreign_key(None, 'knowledge_base_document', 'documents', ['document_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'knowledge_base_document', 'knowledge_bases', ['knowledge_base_id'], ['id'], ondelete='CASCADE')
    op.add_column('knowledge_bases', sa.Column('meta_data', sa.JSON(), nullable=True))
    op.add_column('knowledge_bases', sa.Column('tenant_id', sa.String(length=36), nullable=False))
    op.add_column('knowledge_bases', sa.Column('built_in_field_enabled', sa.Boolean(), nullable=False))
    op.alter_column('knowledge_bases', 'name',
               existing_type=mysql.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('knowledge_bases', 'chunking_strategy',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Enum('RECURSIVE', 'FIXED_SIZE', 'SEMANTIC', 'CUSTOM', name='chunkingstrategy'),
               existing_nullable=False)
    op.alter_column('knowledge_bases', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('knowledge_bases', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.create_index(op.f('ix_knowledge_bases_tenant_id'), 'knowledge_bases', ['tenant_id'], unique=False)
    op.drop_constraint('knowledge_bases_ibfk_1', 'knowledge_bases', type_='foreignkey')
    op.drop_column('knowledge_bases', 'custom_separators')
    op.drop_column('knowledge_bases', 'vector_store')
    op.drop_column('knowledge_bases', 'embedding_model')
    op.alter_column('permissions', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('roles', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.add_column('segments', sa.Column('dataset_id', sa.String(length=36), nullable=True))
    op.add_column('segments', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('segments', sa.Column('word_count', sa.Integer(), nullable=True))
    op.add_column('segments', sa.Column('token_count', sa.Integer(), nullable=True))
    op.add_column('segments', sa.Column('embedding_tokens', sa.Integer(), nullable=True))
    op.add_column('segments', sa.Column('embedding_vector', sa.Text(), nullable=True))
    op.add_column('segments', sa.Column('embedding_model', sa.String(length=100), nullable=True))
    op.add_column('segments', sa.Column('score', sa.Float(), nullable=True))
    op.add_column('segments', sa.Column('indexing_at', sa.DateTime(), nullable=True))
    op.alter_column('segments', 'enabled',
               existing_type=mysql.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=False)
    op.create_index(op.f('ix_segments_dataset_id'), 'segments', ['dataset_id'], unique=False)
    op.alter_column('users', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.drop_index(op.f('ix_segments_dataset_id'), table_name='segments')
    op.alter_column('segments', 'enabled',
               existing_type=sa.Boolean(),
               type_=mysql.INTEGER(),
               existing_nullable=False)
    op.drop_column('segments', 'indexing_at')
    op.drop_column('segments', 'score')
    op.drop_column('segments', 'embedding_model')
    op.drop_column('segments', 'embedding_vector')
    op.drop_column('segments', 'embedding_tokens')
    op.drop_column('segments', 'token_count')
    op.drop_column('segments', 'word_count')
    op.drop_column('segments', 'status')
    op.drop_column('segments', 'dataset_id')
    op.alter_column('roles', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('permissions', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.add_column('knowledge_bases', sa.Column('embedding_model', mysql.VARCHAR(length=100), nullable=False))
    op.add_column('knowledge_bases', sa.Column('vector_store', mysql.VARCHAR(length=50), nullable=False))
    op.add_column('knowledge_bases', sa.Column('custom_separators', mysql.TEXT(), nullable=True, comment='自定义分隔符，JSON格式存储字符串列表'))
    op.create_foreign_key('knowledge_bases_ibfk_1', 'knowledge_bases', 'users', ['created_by'], ['id'])
    op.drop_index(op.f('ix_knowledge_bases_tenant_id'), table_name='knowledge_bases')
    op.alter_column('knowledge_bases', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('knowledge_bases', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('knowledge_bases', 'chunking_strategy',
               existing_type=sa.Enum('RECURSIVE', 'FIXED_SIZE', 'SEMANTIC', 'CUSTOM', name='chunkingstrategy'),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('knowledge_bases', 'name',
               existing_type=sa.String(length=255),
               type_=mysql.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('knowledge_bases', 'built_in_field_enabled')
    op.drop_column('knowledge_bases', 'tenant_id')
    op.drop_column('knowledge_bases', 'meta_data')
    op.drop_constraint(None, 'knowledge_base_document', type_='foreignkey')
    op.drop_constraint(None, 'knowledge_base_document', type_='foreignkey')
    op.create_foreign_key('knowledge_base_document_ibfk_2', 'knowledge_base_document', 'knowledge_bases', ['knowledge_base_id'], ['id'])
    op.create_foreign_key('knowledge_base_document_ibfk_1', 'knowledge_base_document', 'documents', ['document_id'], ['id'])
    op.alter_column('knowledge_base_document', 'document_id',
               existing_type=mysql.VARCHAR(length=36),
               nullable=True)
    op.alter_column('knowledge_base_document', 'knowledge_base_id',
               existing_type=mysql.VARCHAR(length=36),
               nullable=True)
    op.drop_column('documents', 'processing_completed_at')
    op.drop_column('documents', 'indexing_completed_at')
    op.drop_column('documents', 'indexing_started_at')
    op.drop_column('documents', 'splitting_completed_at')
    op.drop_column('documents', 'splitting_started_at')
    op.drop_column('documents', 'parsing_completed_at')
    op.drop_column('documents', 'parsing_started_at')
    op.drop_column('documents', 'processing_started_at')
    op.drop_column('documents', 'token_count')
    op.drop_column('documents', 'word_count')
    op.drop_column('documents', 'archived')
    op.drop_column('documents', 'enabled')
    op.drop_column('documents', 'doc_format')
    op.drop_column('documents', 'doc_form')
    op.create_table('task_status',
    sa.Column('id', mysql.VARCHAR(length=36), nullable=False),
    sa.Column('task_id', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('task_name', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('task_type', mysql.VARCHAR(length=50), nullable=False),
    sa.Column('status', mysql.VARCHAR(length=50), nullable=False),
    sa.Column('progress', mysql.FLOAT(), nullable=False),
    sa.Column('result', mysql.TEXT(), nullable=True),
    sa.Column('error', mysql.TEXT(), nullable=True),
    sa.Column('task_metadata', mysql.TEXT(), nullable=True, comment='任务元数据，JSON格式'),
    sa.Column('retries', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_retries', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', mysql.VARCHAR(length=36), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=False),
    sa.Column('updated_at', mysql.DATETIME(), nullable=False),
    sa.Column('started_at', mysql.DATETIME(), nullable=True),
    sa.Column('completed_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index('ix_task_status_user_id', 'task_status', ['user_id'], unique=False)
    op.create_index('ix_task_status_task_type_status', 'task_status', ['task_type', 'status'], unique=False)
    op.create_index('ix_task_status_task_id', 'task_status', ['task_id'], unique=True)
    op.create_index('ix_task_status_status_created_at', 'task_status', ['status', 'created_at'], unique=False)
    op.drop_table('child_chunks')
    op.drop_table('knowledge_base_permissions')
    op.drop_table('knowledge_base_documents')
    # ### end Alembic commands ###
